{"version":3,"sources":["components/Cards/Cards.module.css","components/CountryPicker/CountryPicker.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","images/image.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","seperator","Date","toDateString","url","fetchData","country","a","changeableUrl","console","log","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","StylesProvider","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,oBCAnKD,EAAOC,QAAU,CAAC,YAAc,qC,4NCuDjBC,EAjDD,SAAC,GAA6D,IAAD,IAA1DC,KAASC,EAAiD,EAAjDA,UAAWC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,OAASC,EAAkB,EAAlBA,WAErD,OAAIH,EAOA,yBAAKI,UAAWC,IAAOC,WACnB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAU,EAAGC,QAAQ,UACrC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,WACzE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBC,cAAY,GAA/C,YACA,kBAACF,EAAA,EAAD,CAAYG,QAAS,MACjB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKxB,EAAUyB,MAAOC,SAAU,IAAKC,UAAU,OAEtE,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,iCAIR,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOJ,YACzE,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBC,cAAY,GAA/C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAS,MACjB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKvB,EAAUwB,MAAOC,SAAU,IAAKC,UAAU,OAEtE,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,0CAIR,kBAACf,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOH,SACzE,kBAACgB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAaC,MAAM,gBAAgBC,cAAY,GAA/C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAS,MACjB,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKtB,EAAOuB,MAAOC,SAAU,IAAKC,UAAU,OAEnE,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAKzB,GAAY0B,gBACxD,kBAACV,EAAA,EAAD,CAAYG,QAAQ,SAApB,2CApCN,kB,iCCTRQ,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DAEjBC,EAAgBJ,EAChBE,IACAE,EAAa,UAAMJ,EAAN,sBAAuBE,GACpCG,QAAQC,IAAIJ,IALK,kBAWoDK,IAAMC,IAAIJ,GAX9D,2BAWTnC,KAASC,EAXA,EAWAA,UAAWC,EAXX,EAWWA,UAAWC,EAXtB,EAWsBA,OAAQC,EAX9B,EAW8BA,WAX9B,kBAaV,CAAEH,YAAWC,YAAWC,SAASC,eAbvB,kCAejBgC,QAAQC,IAAR,MAfiB,0DAAH,sDAoBTG,EAAc,uCAAG,gCAAAN,EAAA,+EAECI,IAAMC,IAAN,UAAaR,EAAb,WAFD,uBAEd/B,EAFc,EAEdA,KACHyC,EAAezC,EAAK0C,KAAI,SAACC,GAAD,MAAgB,CACzC1C,UAAW0C,EAAU1C,UAAU2C,MAC/BzC,OAAQwC,EAAUxC,OAAOyC,MACzBC,KAAOF,EAAUG,eANC,kBASfL,GATe,gCAWtBL,QAAQC,IAAR,MAXsB,yDAAH,qDAedU,EAAc,uCAAG,8BAAAb,EAAA,+EAEgBI,IAAMC,IAAN,UAAaR,EAAb,eAFhB,uBAELiB,EAFK,EAEdhD,KAASgD,UAFK,kBAIfA,EAAUN,KAAI,SAACT,GAAD,OAAaA,EAAQgB,SAJpB,yFAAH,qD,iBCkCZC,EAnED,SAAC,GAAqD,IAAD,IAAnDlD,KAAMC,EAA6C,EAA7CA,UAAWE,EAAkC,EAAlCA,OAAQD,EAA0B,EAA1BA,UAAa+B,EAAa,EAAbA,QAAa,EAEvBkB,mBAAS,IAFc,mBAEnDR,EAFmD,KAExCS,EAFwC,KAM3DC,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEAEhBkB,EAFgB,SAEIZ,IAFJ,6EAAH,qDAIdc,KACD,IAEN,IAAMC,EAAcZ,EAAUa,OAEzB,kBAAC,IAAD,CACAxD,KAAM,CACFyD,OAAQd,EAAUD,KAAI,qBAAGG,QACzBa,SAAU,CAAC,CACP1D,KAAO2C,EAAUD,KAAI,qBAAGzC,aACxB0D,MAAQ,WACRC,YAAc,UACdC,MAAM,GACP,CACD7D,KAAO2C,EAAUD,KAAI,qBAAGvC,UACxBwD,MAAQ,SACRC,YAAc,MACdE,gBAAkB,oBAClBD,MAAM,OAGR,KAGVzB,QAAQC,IAAIpC,EAAWC,EAAWC,GAElC,IAAM4D,EACF9D,EACE,kBAAC,IAAD,CACED,KAAM,CACJyD,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CACR,CACEC,MAAO,SACPG,gBAAiB,CAAC,uBAAwB,uBAAwB,wBAClE9D,KAAM,CAACC,EAAUyB,MAAOxB,EAAUwB,MAAOvB,EAAOuB,UAItDsC,QAAS,CACPC,OAAQ,CAAEC,SAAS,GACnBC,MAAO,CAAED,SAAS,EAAME,KAAK,oBAAD,OAAsBnC,OAGpD,KAIR,OACG,yBAAK5B,UAAWC,IAAOC,WAClB0B,EAAU8B,EAAWR,EAD1B,M,2BClCQc,G,OAxBO,SAAC,GAA8B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EAECnB,mBAAS,IAFV,mBAEzCoB,EAFyC,KAEvBC,EAFuB,KAchD,OAVAnB,qBAAU,YACQ,uCAAG,sBAAAnB,EAAA,kEACbsC,EADa,SACczB,IADd,6EAAH,qDAIdO,KACD,CAACkB,IAKA,kBAACC,EAAA,EAAD,CAAapE,UAAWqE,IAAeC,aACnC,kBAACC,EAAA,EAAD,CAAcC,aAAa,QAAQC,SAAU,SAACC,GAAD,OAAOT,EAAoBS,EAAEC,OAAOtD,SAC7E,4BAAQA,MAAO,IAAf,UACC6C,EAAiB7B,KAAI,SAACT,EAASgD,GAAV,OAAgB,4BAAQC,IAAKD,EAAGvD,MAASO,GAAWA,U,kCCgC3EkD,E,4MA5CXC,MAAQ,CACJpF,KAAO,GACPiC,QAAQ,I,EAWhBqC,oB,uCAAsB,WAAMrC,GAAN,eAAAC,EAAA,+EAEQF,EAAUC,GAFlB,OAEZoD,EAFY,OAIlB,EAAKC,SAAS,CAAEtF,KAAMqF,EAAapD,QAASA,IAJ1B,gDASfG,QAAQC,IAAR,MATe,yD,wPAPYL,I,OAApBqD,E,OAENE,KAAKD,SAAS,CAAEtF,KAAMqF,IAEtBjD,QAAQC,IAAIgD,G,qIAqBN,IAAD,EACsBE,KAAKH,MAAxBpF,EADH,EACGA,KAAOiC,EADV,EACUA,QACf,OACI,yBAAK5B,UAAaC,IAAOC,WACrB,yBAAKF,UAAWC,IAAOkF,MAAQC,IAAKC,IAAaC,IAAM,aACvD,kBAAC,EAAD,CAAQ3F,KAAQA,IAChB,kBAAC,EAAD,CAAesE,oBAAqBiB,KAAKjB,sBACzC,kBAAC,EAAD,CAAOtE,KAAQA,EAAMiC,QAAUA,S,GAvC7B2D,IAAMC,WCRxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCJjDpG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCD9BD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.38f28dc1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__knds5\",\"card\":\"Cards_card__1M3c4\",\"infected\":\"Cards_infected__2GX-j\",\"recovered\":\"Cards_recovered__CPa5_\",\"deaths\":\"Cards_deaths__2lQ7P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1zXpY\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nconst Cards = ({ data : { confirmed, recovered, deaths , lastUpdate }}) => {\r\n   // console.log(confirmed);\r\n    if(!confirmed)\r\n    {\r\n        return'Loading.......';\r\n    }\r\n    //console.log(props);\r\n\r\n    return(\r\n        <div className={styles.container}>\r\n            <Grid container spacing= {3} justify=\"center\" >\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                <CardContent>\r\n                    <Typography  color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                    <Typography variant =\"h5\">\r\n                        <CountUp start={0} end={confirmed.value} duration={2.5} seperator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of cases of COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                <CardContent>\r\n                    <Typography  color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography variant =\"h5\">\r\n                        <CountUp start={0} end={recovered.value} duration={2.5} seperator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of recoveries due to COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n\r\n            <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                <CardContent>\r\n                    <Typography  color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography variant =\"h5\">\r\n                        <CountUp start={0} end={deaths.value} duration={2.5} seperator=\",\"/>\r\n                    </Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number of Deaths caused by COVID-19</Typography>\r\n                </CardContent>\r\n            </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from   'axios';\r\n//import ReactDom from 'react-dom';\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n\r\n    let changeableUrl = url;\r\n    if (country) {\r\n        changeableUrl = `${url}/countries/${country}`;\r\n        console.log(country);   \r\n\r\n    }\r\n    \r\n    \r\n    try {\r\n        const { data : { confirmed, recovered, deaths, lastUpdate }} = await axios.get(changeableUrl);\r\n\r\n        return { confirmed, recovered, deaths , lastUpdate};\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const { data } = await axios.get(`${url}/daily`);\r\n       const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date : dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () => {\r\n    try {\r\n        const { data : { countries }} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n    } catch (error) {\r\n        \r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport {Line , Bar } from 'react-chartjs-2';\r\nimport { fetchDailyData } from '../../api';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data:{confirmed, deaths, recovered }, country}) => {\r\n\r\n        const [ dailyData, setDailyData ] = useState([]);\r\n\r\n        \r\n\r\n        useEffect(() => { \r\n            const fetchAPI = async () => {\r\n                \r\n             setDailyData (await fetchDailyData());\r\n        }\r\n            fetchAPI();\r\n        }, []);\r\n\r\n     const lineChart = ( dailyData.length\r\n         ? (    \r\n          <Line \r\n          data={{\r\n              labels: dailyData.map(({ date })=> date),\r\n              datasets: [{\r\n                  data : dailyData.map(({ confirmed })=> confirmed),\r\n                  label : 'Infected',\r\n                  borderColor : '#3333ff',\r\n                  fill: true\r\n              }, {\r\n                data : dailyData.map(({ deaths })=> deaths),\r\n                label : 'Deaths',\r\n                borderColor : 'red',\r\n                backgroundColor : 'rgba(255,0,0,0.5)',\r\n                fill: true\r\n              }]\r\n          }}          \r\n        />) : null\r\n    );\r\n\r\n    console.log(confirmed, recovered, deaths);\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [\r\n                {\r\n                  label: 'People',\r\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                  data: [confirmed.value, recovered.value, deaths.value],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n    \r\n\r\n    return(\r\n       <div className={styles.container}>\r\n           {country ? barChart : lineChart };\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default Chart;","import React, { useState,useEffect } from 'react';\r\nimport { NativeSelect, FormControl, StylesProvider } from '@material-ui/core';\r\n\r\n\r\nimport styles from './CountryPicker.module.css';\r\n\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ( { handleCountryChange }) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries ] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        const fetchAPI = async () => {\r\n            setFetchedCountries (await fetchCountries());\r\n        }\r\n\r\n        fetchAPI();\r\n    }, [setFetchedCountries]);\r\n\r\n    //console.log(fetchedCountries);\r\n\r\n    return(\r\n        <FormControl className={StylesProvider.formControl}>\r\n            <NativeSelect defaultValue=\"India\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n                <option value= \"\">GloBal</option>\r\n                {fetchedCountries.map((country, i) => <option key={i} value= { country }>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;","import React from  'react';\r\n\r\n//import Cards from './components/Cards/Cards';\r\n//mport Chart from './components/Chart/Chart';\r\n//import CountryPicker from './components/CountryPicker/CountryPicker';\r\n\r\nimport { Cards,Chart,CountryPicker} from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api'\r\n\r\nimport coronaImage from './images/image.png';\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data : {},\r\n        country:'',\r\n    }\r\n\r\n    async componentDidMount() {\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({ data: fetchedData});\r\n\r\n        console.log(fetchedData);\r\n\r\n    }\r\nhandleCountryChange = async(country) => {\r\n   try {\r\n    const fetchedData = await fetchData(country);\r\n    \r\n    this.setState({ data: fetchedData, country: country });\r\n\r\n\r\n   } catch (error) {\r\n       \r\n       console.log(error);\r\n   } \r\n\r\n   // console.log(fetchData);\r\n   // console.log(country);\r\n    //fetch data\r\n    //set state\r\n}\r\n\r\n    render() {\r\n        const { data , country } = this.state;\r\n        return (\r\n            <div className = {styles.container}>\r\n                <img className={styles.image } src={coronaImage} alt = \"COVID-19\"/>\r\n                <Cards  data= { data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data = {data} country= {country}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport  App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1p3cS\",\"image\":\"App_image__2TMHG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__J-06-\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}